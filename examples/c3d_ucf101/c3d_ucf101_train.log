I0713 17:40:31.163435  2387 caffe.cpp:217] Using GPUs 0
I0713 17:40:31.431056  2387 caffe.cpp:222] GPU 0: GeForce GTX TITAN X
I0713 17:40:31.740478  2387 solver.cpp:48] Initializing solver from parameters: 
test_iter: 200
test_iter: 200
test_interval: 1000
base_lr: 0.001
display: 20
max_iter: 60000
lr_policy: "step"
gamma: 0.1
momentum: 0.9
weight_decay: 0.005
stepsize: 20000
snapshot: 5000
snapshot_prefix: "examples/c3d_ucf101/c3d_ucf101"
solver_mode: GPU
device_id: 0
net: "examples/c3d_ucf101/c3d_ucf101_train_test.prototxt"
train_state {
  level: 0
  stage: ""
}
test_state {
  stage: "test-on-train"
}
test_state {
  stage: "test-on-val"
}
I0713 17:40:31.740842  2387 solver.cpp:91] Creating training net from net file: examples/c3d_ucf101/c3d_ucf101_train_test.prototxt
I0713 17:40:31.741943  2387 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer data
I0713 17:40:31.742003  2387 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer data
I0713 17:40:31.742094  2387 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer prob
I0713 17:40:31.742118  2387 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0713 17:40:31.742136  2387 net.cpp:322] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0713 17:40:31.742410  2387 net.cpp:58] Initializing net from parameters: 
name: "c3d_ucf101"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "data"
  type: "VideoData"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    mirror: true
    crop_size: 112
    mean_value: 90
    mean_value: 98
    mean_value: 102
  }
  video_data_param {
    source: "examples/c3d_ucf101/c3d_ucf101_train_split1.txt"
    batch_size: 15
    shuffle: true
    new_length: 16
    new_height: 128
    new_width: 171
  }
}
layer {
  name: "conv1a"
  type: "Convolution"
  bottom: "data"
  top: "conv1a"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
    kernel_size: 3
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1a"
  type: "ReLU"
  bottom: "conv1a"
  top: "conv1a"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1a"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 1
    kernel_size: 2
    kernel_size: 2
    stride: 1
    stride: 2
    stride: 2
  }
}
layer {
  name: "conv2a"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2a"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    kernel_size: 3
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu2a"
  type: "ReLU"
  bottom: "conv2a"
  top: "conv2a"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2a"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    kernel_size: 2
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv3a"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3a"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    kernel_size: 3
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu3a"
  type: "ReLU"
  bottom: "conv3a"
  top: "conv3a"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3a"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    kernel_size: 2
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv4a"
  type: "Convolution"
  bottom: "pool3"
  top: "conv4a"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    kernel_size: 3
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu4a"
  type: "ReLU"
  bottom: "conv4a"
  top: "conv4a"
}
layer {
  name: "pool4"
  type: "Pooling"
  bottom: "conv4a"
  top: "pool4"
  pooling_param {
    pool: MAX
    kernel_size: 2
    kernel_size: 2
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv5a"
  type: "Convolution"
  bottom: "pool4"
  top: "conv5a"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    kernel_size: 3
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu5a"
  type: "ReLU"
  bottom: "conv5a"
  top: "conv5a"
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv5a"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 2
    kernel_size: 2
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 2048
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 2048
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc8"
  type: "InnerProduct"
  bottom: "fc7"
  top: "fc8"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 101
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "fc8"
  bottom: "label"
  top: "loss"
}
I0713 17:40:31.743994  2387 layer_factory.hpp:77] Creating layer data
I0713 17:40:31.744146  2387 net.cpp:100] Creating Layer data
I0713 17:40:31.744181  2387 net.cpp:408] data -> data
I0713 17:40:31.744247  2387 net.cpp:408] data -> label
I0713 17:40:31.744756  2387 video_data_layer.cpp:39] Opening file examples/c3d_ucf101/c3d_ucf101_train_split1.txt
I0713 17:40:31.822263  2387 video_data_layer.cpp:53] Shuffling data
I0713 17:40:31.855280  2387 video_data_layer.cpp:58] A total of 107258 video chunks.
E0713 17:40:31.855419  2387 io.cpp:169] Could not open or find file /media/6TB1/Videos/UCF-101/ShavingBeard/v_ShavingBeard_g09_c06
F0713 17:40:31.855758  2387 video_data_layer.cpp:77] Check failed: read_video_result Could not load /media/6TB1/Videos/UCF-101/ShavingBeard/v_ShavingBeard_g09_c06 at frame 129.
*** Check failure stack trace: ***
    @     0x7fdf596a59fd  google::LogMessage::Fail()
    @     0x7fdf596a789d  google::LogMessage::SendToLog()
    @     0x7fdf596a55ec  google::LogMessage::Flush()
    @     0x7fdf596a81be  google::LogMessageFatal::~LogMessageFatal()
    @     0x7fdf59c97bda  caffe::VideoDataLayer<>::DataLayerSetUp()
    @     0x7fdf59c0d193  caffe::BasePrefetchingDataLayer<>::LayerSetUp()
    @     0x7fdf59d2e385  caffe::Net<>::Init()
    @     0x7fdf59d2f225  caffe::Net<>::Net()
    @     0x7fdf59d919aa  caffe::Solver<>::InitTrainNet()
    @     0x7fdf59d92bbc  caffe::Solver<>::Init()
    @     0x7fdf59d92eea  caffe::Solver<>::Solver()
    @     0x7fdf59d7e733  caffe::Creator_SGDSolver<>()
    @           0x4120bd  caffe::SolverRegistry<>::CreateSolver()
    @           0x40b342  train()
    @           0x40897c  main
    @     0x7fdf57eaaf45  (unknown)
    @           0x409283  (unknown)
